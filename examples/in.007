func infix:<in>(value, container) {
    if container ~~ Array {
        for container -> elem {
            if elem == value {
                return true;
            }
        }
        return false;
    }
    else if container ~~ Object {
        return container.has(value);
    }
    else if container ~~ Str {
        return container.contains(~value);
    }
    else {
        throw new Exception {
            message: "Wrong type to infix:<in>. Expected Array or Object or Str, was " ~ type(container),
        };
    }
}

func infix:<not in>(value, container) {
    if container ~~ Array {
        for container -> elem {
            if elem == value {
                return false;
            }
        }
        return true;
    }
    else if container ~~ Object {
        return !container.has(value);
    }
    else if container ~~ Str {
        return !container.contains(~value);
    }
    else {
        throw new Exception {
            message: "Wrong type to infix:<not in>. Expected Array or Object or Str, was " ~ type(container),
        };
    }
}

say("foo" in { foo: 42 });              # true
say("bar" in { foo: 42 });              # false
say(3 in [1, 2, 3, 4]);                 # true
say(8 in [1, 2, 3, 4]);                 # false
say("foo" in "foolish");                # true
say("I" in "team");                     # false

say("job" not in { name: "James" });    # true
say("name" not in { name: "James" });   # false
say("d" not in ["a", "b", "c"]);        # true
say("b" not in ["a", "b", "c"]);        # false
say("we" not in "Kansas");              # true
say("pi" not in "pie");                 # false
