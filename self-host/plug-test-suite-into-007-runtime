sub find($dir, Regex $pattern) {
    my @targets = dir($dir);
    gather while @targets {
        my $file = @targets.shift;
        take $file if $file ~~ $pattern;
        if $file.IO ~~ :d {
            @targets.append: dir($file);
        }
    }
}

# Run the following script to re-calculate this constant:
#
# $ (for file in `find t/features t/integration -name \*.t`; do perl6 $file | grep '1\.\.'; done) |
#       perl6 -ne'/\.\.(\d+)/; our $n += $0; END { say $n }'

constant TOTAL = 454;

sub MAIN() {
    my $score = 0;
    my %stats;

    for |find("t/features", /".t" $/), |find("t/integration", /".t" $/) -> $file {
        say "== $file";
        my $contents = slurp($file);
        my $basename = $file.basename.subst(/".t" $/, "");
        my $tempfile-name = "$basename-$*PID.t";
        LEAVE { unlink $tempfile-name if $tempfile-name }
        signal(SIGINT).act: { unlink $tempfile-name if $tempfile-name; exit 1 }
        spurt($tempfile-name, $contents.subst(/^^ \h* "use _007::Test;" \h* $$/, q:to/REPLACEMENT/));
            use _007::Test <&read>;
            
            multi dump(Val::Array $things) {
                "[" ~ $things.elements.map(&dump).join(", ") ~ "]";
            }
            
            multi dump(Val::Str $str) {
                $str.quoted-Str;
            }
            
            multi dump(Val::Int $int) {
                ~$int;
            }
            
            multi dump(Val::None $) {
                "None";
            }
            
            multi dump(Q $q) {
                sub aname($attr) { $attr.name.substr(2) }
                sub avalue($attr, $obj) { $attr.get_value($obj) }
                sub keyvalue($attr) { aname($attr) ~ ": " ~ dump(avalue($attr, $q)) }
            
                my @attrs = $q.attributes;
                my $contents = @attrs.map(&keyvalue).join(",\n").indent(4);
                return "new {$q.^name} \{\n$contents\n\}";
            }
            
            sub is-result($input, $expected, $desc) {
                my $compunit = read($input);
                my $statements = $compunit.block.statementlist.statements;
                my $qtree = dump($statements);
            
                my $original-program = slurp("self-host/runtime.007");
                my $runtime-program = $original-program.subst(/ ^^ (\h*) 'statements: []' \h* $$/, -> $/ {
                    "statements: $qtree".indent($0.chars)
                });
            
                my $output = StrOutput.new;
                my $runtime = _007.runtime(:$output);
                my $ast = _007.parser(:$runtime).parse($runtime-program);
                $runtime.run($ast);
            
                is $output.result, $expected, $desc;
            }
            
            sub outputs($program, $expected, $desc) {
                my $output = StrOutput.new;
                my $runtime = _007.runtime(:$output);
                my $parser = _007.parser(:$runtime);
                my $compunit = $parser.parse($program);
                my $statements = $compunit.block.statementlist.statements;
                my $qtree = dump($statements);
            
                my $original-program = slurp("self-host/runtime.007");
                my $runtime-program = $original-program.subst(/ ^^ (\h*) 'statements: []' \h* $$/, -> $/ {
                    "statements: $qtree".indent($0.chars)
                });
            
                my $ast = _007.parser(:$runtime).parse($runtime-program);
                $runtime.run($ast);
            
                is $output.result, $expected, $desc;
            }

            sub is-error($input, $expected-error, $desc = $expected-error.^name) is export {
                skip("not at all sure what to do with is-error in runtime.007");
                # like, how does the error propagate up from runtime.007 to Runtime.pm?
                # there's probably a very nice answer to that, but we're not yet at the
                # point where we can easily see that answer
            }

            sub throws-exception($input, $expected-error, $desc = $expected-error.^name) is export {
                skip("not at all sure what to do with throws-exception in runtime.007");
                # see comment about is-error above
            }

            sub parses-to($program, $expected, $desc = "MISSING TEST DESCRIPTION", Bool :$unexpanded) {
                skip("test is parser-only and we're testing runtime.007");
            }

            sub parse-error($program, $expected-error, $desc = $expected-error.^name) {
                skip("test is parser-only and we're testing runtime.007");
            }
            REPLACEMENT

        my $proc = run("perl6", $tempfile-name, :out);
        my $result = "";
        for $proc.out.lines -> $line {
            if $line ~~ /^ "ok "/ {
                $score++;
            }
            if $line ~~ /^ ("not ")? "ok "/ {
                $result ~= $0 ?? "x" !! ".";
            }
            if $line ~~ /^ "1.."/ {
                $result ~= "#";
            }
            say $line;
        }
        my $failures = $proc.out.close;
        %stats{$file.path} = $result;
    }

    say "";
    say "Your score is {$score} ({($score/TOTAL*100).fmt("%d%%")}) out of a {TOTAL} possible points.";

    given open("self-host/.latest-test-run", :w) -> $fh {
        for %stats.keys.sort -> $path {
            my $result = %stats{$path};
            $fh.say: "$path: $result";
        }
        $fh.close;
    }

    if "self-host/.baseline".IO !~~ :e {
        say "Run `self-host/establish-baseline` to register this run as the baseline.";
        return;
    }
    my %baseline;
    my ($better, $worse) = False, False;
    for "self-host/.baseline".IO.lines {
        next if /^ \h* $/;
        /^ $<path>=(<-[:]>+) ":" \h* $<result>=(\S*) $/
            or die "Unknown line format '$_'";
        %baseline{~$<path>} = ~$<result>;
    }
    for %stats.keys.sort -> $path {
        if %baseline{$path} :!exists {
            say "New test file $path";
            $better = True;
            next;
        }
        my $results = %stats{$path};
        my $baseline-results = %baseline{$path};
        if $baseline-results.chars < $results.chars {
            say "Running more tests in $path";
            $better = True;
        }
        elsif $baseline-results.chars > $results.chars {
            say "Running fewer tests in $path";
            $worse = True;
        }
        for ^min($results.chars, $baseline-results.chars) -> $i {
            given ($baseline-results.substr($i, 1), $results.substr($i, 1)) {
                when ("x", ".") {
                    say "Test #{$i + 1} now succeeds in $path";
                    $better = True;
                }
                when (".", "x") {
                    say "Test #{$i + 1} now fails in $path";
                    $worse = True;
                }
            }
        }
    }

    if $better && !$worse {
        say "";
        say "An improvement! Run `self-host/establish-baseline` as you commit.";
    }
    elsif $worse && !$better {
        say "";
        say "AUUGH! Some new tests fail now compared to the baseline.";
    }
    elsif $better && $worse {
        say "";
        say "Some tests now pass, some now fail. Life is like a box of chocolates.";
    }
}
