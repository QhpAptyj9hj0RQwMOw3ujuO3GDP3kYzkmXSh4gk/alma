sub MAIN($file) {
    my $contents = slurp($file);
    my $basename = $file.IO.basename.subst(/".t" $/, "");
    my $tempfile-name = "$basename-$*PID.t";
    LEAVE { unlink $tempfile-name if $tempfile-name }
    signal(SIGINT).act: { unlink $tempfile-name if $tempfile-name; exit 1 }
    spurt($tempfile-name, $contents.subst(/^^ \h* "use _007::Test;" \h* $$/, q:to/REPLACEMENT/));
        use _007::Test <&read>;
        
        multi dump(Val::Array $things) {
            "[" ~ $things.elements.map(&dump).join(", ") ~ "]";
        }
        
        multi dump(Val::Str $str) {
            $str.quoted-Str;
        }
        
        multi dump(Val::Int $int) {
            ~$int;
        }
        
        multi dump(Val::None $) {
            "None";
        }
        
        multi dump(Q $q) {
            sub aname($attr) { $attr.name.substr(2) }
            sub avalue($attr, $obj) { $attr.get_value($obj) }
            sub keyvalue($attr) { aname($attr) ~ ": " ~ dump(avalue($attr, $q)) }
        
            my @attrs = $q.attributes;
            my $contents = @attrs.map(&keyvalue).join(",\n").indent(4);
            return "new {$q.^name} \{\n$contents\n\}";
        }
        
        sub is-result($input, $expected, $desc) {
            my $compunit = read($input);
            my $statements = $compunit.block.statementlist.statements;
            my $qtree = dump($statements);
        
            my $original-program = slurp("self-host/runtime.007");
            my $runtime-program = $original-program.subst(/ ^^ (\h*) 'statements: []' \h* $$/, -> $/ {
                "statements: $qtree".indent($0.chars)
            });
        
            my $output = StrOutput.new;
            my $runtime = _007.runtime(:$output);
            my $ast = _007.parser(:$runtime).parse($runtime-program);
            $runtime.run($ast);
        
            is $output.result, $expected, $desc;
        }
        
        sub outputs($program, $expected, $desc) {
            my $output = StrOutput.new;
            my $runtime = _007.runtime(:$output);
            my $parser = _007.parser(:$runtime);
            my $compunit = $parser.parse($program);
            my $statements = $compunit.block.statementlist.statements;
            my $qtree = dump($statements);
        
            my $original-program = slurp("self-host/runtime.007");
            my $runtime-program = $original-program.subst(/ ^^ (\h*) 'statements: []' \h* $$/, -> $/ {
                "statements: $qtree".indent($0.chars)
            });
        
            my $ast = _007.parser(:$runtime).parse($runtime-program);
            $runtime.run($ast);
        
            is $output.result, $expected, $desc;
        }

        sub parse-error($program, $expected-error, $desc = $expected-error.^name) {
            skip("test is parser-only and we're testing runtime.007");
        }
        REPLACEMENT

    my $failures = shell("perl6 $tempfile-name");
    $failures.exitcode; # to get rid of complaint when test file has failures
}
