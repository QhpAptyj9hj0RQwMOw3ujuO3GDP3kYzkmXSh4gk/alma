#!/usr/bin/env perl6
use v6;
use _007;
use _007::Backend::JavaScript;
use _007::Instrumentation;

class Ref {
    has Str $.deref;
}

sub ref($deref) {
    Ref.new(:$deref);
}

constant %BACKENDS = hash
    "default" => ref("runtime"),
    "runtime" => { $^runtime.run($^ast) },
    "javascript" => -> $ast, $ { print _007::Backend::JavaScript.new.emit($ast) },
    "js" => ref("javascript"),
    "ast" => -> $ast, $ { say ~$ast },
    "unexpanded-ast" => -> $ast, $ { say ~$ast },
    "i13n" => -> $ast, $ {
        my $width = ceiling(log($*program.lines + 1)/log(10));
        say $*program.lines.kv.map(-> $i, $line {
            my $line-number = $i + 1;
            my @lines = _007::Instrumentation.annotations-for-line($line-number);
            my $indent = ($line ~~ /^ " "*/).chars;
            @lines.=map({ " " x $width ~ "  " ~ " " x $indent ~ "# " ~ $_ });
            @lines.push(sprintf "%{$width}d. %s", $line-number, $line);
            slip(@lines);
        }).join("\n")
    },
;

sub run_007($*program, Str $backend is copy) {
    die "Unknown backend '$backend'"
        unless %BACKENDS{$backend} :exists;
    $backend = %BACKENDS{$backend}.deref
        while %BACKENDS{$backend} ~~ Ref;

    my $runtime = _007.runtime;
    my $unexpanded = $backend eq "unexpanded-ast";
    my $ast = _007.parser(:$runtime).parse($*program, :$unexpanded);
    %BACKENDS{$backend}($ast, $runtime);
}

multi MAIN($path, Str :$backend = "default") {
    run_007(slurp($path), $backend);
}

multi MAIN(Str :e($program)!, Str :$backend = "default") {
    run_007($program, $backend);
}
