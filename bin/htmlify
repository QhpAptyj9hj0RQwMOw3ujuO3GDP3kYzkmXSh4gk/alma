#!/usr/bin/env perl6
use v6;
use _007;

sub parse_007($program) {
    my $runtime = _007.runtime;
    my $ast = _007.parser(:$runtime).parse($program, :unexpanded);
    say htmlify($ast);
}

multi MAIN($path) {
    parse_007(slurp($path));
}

multi MAIN(Str :e($program)!) {
    parse_007($program);
}

sub aname($attr) { $attr.name.substr(2) }
sub avalue($attr, $obj) { $attr.get_value($obj) }

sub arrow() { qq[<span class="arrow">&#25BC;</span>] }
sub qtype-color($text) { qq[<span class="qtype">{$text}</span>] }
sub attr-color($text) { qq[<span class="attr">{$text}</span>] }
sub val-type-color($text) { qq[<span class="val-type">{$text}</span>] }

multi htmlify(Q $node) {
    sub keyvalue($attr) { "<div>" ~ attr-color(aname($attr)) ~ ": " ~ htmlify(avalue($attr, $node)) ~ "</div>" }
    my $contents = $node.attributes.map(&keyvalue).join("\n").indent(4);
    return "{arrow()} {qtype-color($node.^name)}\n$contents\n";
}

multi htmlify(Val::Array $array) {
    return "[]" unless $array.elements;
    return "[\n" ~ $array.elements.map(&htmlify).map({ "<div>{$_}</div>" }).join("\n").indent(4) ~ "\n]";
}

multi htmlify(Val::Str $str) {
    return val-type-color($str.quoted-Str);
}

multi htmlify(Val::Int $int) {
    return val-type-color(~$int.value);
}
